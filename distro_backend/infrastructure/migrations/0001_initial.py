# Generated by Django 5.1.9 on 2025-05-24 11:14

import django.contrib.gis.db.models.fields
import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset_id', models.CharField(max_length=50, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('location', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('address', models.TextField(blank=True)),
                ('status', models.CharField(choices=[('operational', 'Operational'), ('maintenance', 'Under Maintenance'), ('faulty', 'Faulty'), ('decommissioned', 'Decommissioned')], default='operational', max_length=20)),
                ('condition_score', models.IntegerField(default=10, help_text='Asset condition score from 1 (poor) to 10 (excellent)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(10)])),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('expected_lifespan', models.IntegerField(blank=True, help_text='Expected lifespan in years', null=True)),
                ('warranty_expiry', models.DateField(blank=True, null=True)),
                ('last_inspection_date', models.DateTimeField(blank=True, null=True)),
                ('next_maintenance_date', models.DateField(blank=True, null=True)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('model_number', models.CharField(blank=True, max_length=100)),
                ('serial_number', models.CharField(blank=True, max_length=100)),
                ('specifications', models.JSONField(blank=True, default=dict)),
                ('primary_image', models.ImageField(blank=True, null=True, upload_to='assets/')),
                ('qr_code', models.ImageField(blank=True, null=True, upload_to='assets/qr/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'assets',
            },
        ),
        migrations.CreateModel(
            name='AssetDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('manual', 'Manual'), ('warranty', 'Warranty'), ('inspection', 'Inspection Report'), ('certification', 'Certification'), ('other', 'Other')], max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('file', models.FileField(upload_to='asset_documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'asset_documents',
            },
        ),
        migrations.CreateModel(
            name='AssetPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='asset_photos/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('taken_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'asset_photos',
                'ordering': ['-taken_at'],
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('icon', models.CharField(blank=True, max_length=50)),
                ('color', models.CharField(default='#3b82f6', max_length=7)),
            ],
            options={
                'db_table': 'asset_types',
            },
        ),
        migrations.CreateModel(
            name='Meter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('meter_id', models.CharField(max_length=50, unique=True)),
                ('meter_type', models.CharField(choices=[('customer', 'Customer Meter'), ('bulk', 'Bulk Meter'), ('district', 'District Meter'), ('production', 'Production Meter')], max_length=20)),
                ('size', models.FloatField(help_text='Size in mm', validators=[django.core.validators.MinValueValidator(0)])),
                ('customer_account', models.CharField(blank=True, max_length=50)),
                ('last_reading', models.FloatField(blank=True, null=True)),
                ('last_reading_date', models.DateTimeField(blank=True, null=True)),
                ('total_consumption', models.FloatField(default=0)),
                ('is_smart_meter', models.BooleanField(default=False)),
                ('communication_id', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'meters',
            },
        ),
        migrations.CreateModel(
            name='Pipe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pipe_id', models.CharField(max_length=50, unique=True)),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(srid=4326)),
                ('length', models.FloatField(help_text='Length in meters', validators=[django.core.validators.MinValueValidator(0)])),
                ('diameter', models.FloatField(help_text='Diameter in mm', validators=[django.core.validators.MinValueValidator(0)])),
                ('material', models.CharField(choices=[('pvc', 'PVC'), ('hdpe', 'HDPE'), ('steel', 'Steel'), ('cast_iron', 'Cast Iron'), ('concrete', 'Concrete'), ('other', 'Other')], max_length=20)),
                ('pressure_rating', models.FloatField(help_text='Pressure rating in bar', validators=[django.core.validators.MinValueValidator(0)])),
                ('is_active', models.BooleanField(default=True)),
                ('installation_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'pipes',
            },
        ),
        migrations.CreateModel(
            name='Valve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valve_id', models.CharField(max_length=50, unique=True)),
                ('valve_type', models.CharField(choices=[('gate', 'Gate Valve'), ('butterfly', 'Butterfly Valve'), ('ball', 'Ball Valve'), ('check', 'Check Valve'), ('prv', 'Pressure Reducing Valve'), ('air', 'Air Release Valve')], max_length=20)),
                ('size', models.FloatField(help_text='Size in mm', validators=[django.core.validators.MinValueValidator(0)])),
                ('current_status', models.CharField(choices=[('open', 'Open'), ('closed', 'Closed'), ('partially_open', 'Partially Open'), ('faulty', 'Faulty')], default='open', max_length=20)),
                ('last_operation_date', models.DateTimeField(blank=True, null=True)),
                ('is_remotely_controlled', models.BooleanField(default=False)),
                ('control_id', models.CharField(blank=True, max_length=50)),
            ],
            options={
                'db_table': 'valves',
            },
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=20, unique=True)),
                ('zone_type', models.CharField(choices=[('dma', 'District Metered Area'), ('pressure', 'Pressure Zone'), ('service', 'Service Area')], max_length=20)),
                ('boundary', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('population_served', models.IntegerField(default=0)),
                ('connections', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'zones',
            },
        ),
    ]
