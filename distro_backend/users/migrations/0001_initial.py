# Generated by Django 5.1.9 on 2025-05-25 07:36

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('employee_id', models.CharField(blank=True, help_text='Employee ID for utility staff', max_length=50, null=True, unique=True)),
                ('phone_number', models.CharField(blank=True, help_text='Contact phone number', max_length=17, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+999999999'. Up to 15 digits allowed.", regex='^\\+?1?\\d{9,15}$')])),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('supervisor', 'Supervisor'), ('field_tech', 'Field Technician'), ('customer_service', 'Customer Service')], default='field_tech', help_text='User role in the system', max_length=20)),
                ('avatar', models.ImageField(blank=True, help_text='User profile picture', null=True, upload_to='avatars/')),
                ('location_tracking_consent', models.BooleanField(default=False, help_text='User consent for GPS location tracking')),
                ('last_active', models.DateTimeField(blank=True, help_text='Last time user was active in the system', null=True)),
                ('last_location', models.JSONField(blank=True, help_text='Last known GPS location {lat, lng, timestamp}', null=True)),
                ('notification_preferences', models.JSONField(blank=True, default=dict, help_text='User notification preferences')),
                ('is_active', models.BooleanField(default=True, help_text='Whether user can login')),
                ('is_deleted', models.BooleanField(default=False, help_text='Soft delete flag')),
                ('deleted_on', models.DateTimeField(blank=True, help_text='When user was soft deleted', null=True)),
                ('created_by', models.ForeignKey(blank=True, help_text='User who created this account', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_users', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to.', related_name='distro_user_set', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='distro_user_set', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
        ),
        migrations.CreateModel(
            name='UserInvitation',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('admin', 'Administrator'), ('supervisor', 'Supervisor'), ('field_tech', 'Field Technician'), ('customer_service', 'Customer Service')], max_length=20)),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True)),
                ('is_accepted', models.BooleanField(default=False)),
                ('accepted_on', models.DateTimeField(blank=True, null=True)),
                ('expires_on', models.DateTimeField()),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_invitations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'user_invitations',
                'ordering': ['-created_on'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['employee_id'], name='users_employe_55e465_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['role'], name='users_role_0ace22_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'is_deleted'], name='users_is_acti_80025f_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['email'], name='user_invita_email_abd596_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['token'], name='user_invita_token_59cb54_idx'),
        ),
        migrations.AddIndex(
            model_name='userinvitation',
            index=models.Index(fields=['is_accepted', 'expires_on'], name='user_invita_is_acce_f98225_idx'),
        ),
    ]
